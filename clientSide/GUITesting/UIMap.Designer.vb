'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 14.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace GUITesting
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''Open, Selecting, Cells, Content box, Enter Content
        '''</summary>
        Public Sub BasicFunctions()
            Dim uISpreadsheetGUIShortcListItem As WinListItem = Me.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem
            Dim uIOpenButton As WinButton = Me.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton
            Dim uISpreadsheetPanel1Client As WinClient = Me.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client
            Dim uICellContentEdit As WinEdit = Me.UIForm1Window.UICellContentWindow.UICellContentEdit
            Dim uIA1Button As WinButton = Me.UIForm1Window.UIButton1Window.UIA1Button
            Dim uIB1Button As WinButton = Me.UIForm1Window.UIButton1Window.UIB1Button

            'Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, New Point(34, 26))

            'Click '&Open' button
            Mouse.Click(uIOpenButton, New Point(51, 17))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(122, 36))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(82, 38))

            'Type '=4+3' in 'CellContent' text box
            uICellContentEdit.Text = Me.BasicFunctionsParams.UICellContentEditText

            'Click 'A1' button
            Mouse.Click(uIA1Button, New Point(9, 15))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(131, 37))

            'Type '=a1+4' in 'CellContent' text box
            uICellContentEdit.Text = Me.BasicFunctionsParams.UICellContentEditText1

            'Click 'B1' button
            Mouse.Click(uIB1Button, New Point(9, 15))
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property BasicFunctionsParams() As BasicFunctionsParams
            Get
                If (Me.mBasicFunctionsParams Is Nothing) Then
                    Me.mBasicFunctionsParams = New BasicFunctionsParams()
                End If
                Return Me.mBasicFunctionsParams
            End Get
        End Property
        
        Public ReadOnly Property UIProgramManagerWindow() As UIProgramManagerWindow
            Get
                If (Me.mUIProgramManagerWindow Is Nothing) Then
                    Me.mUIProgramManagerWindow = New UIProgramManagerWindow()
                End If
                Return Me.mUIProgramManagerWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOpenFileSecurityWarnWindow() As UIOpenFileSecurityWarnWindow
            Get
                If (Me.mUIOpenFileSecurityWarnWindow Is Nothing) Then
                    Me.mUIOpenFileSecurityWarnWindow = New UIOpenFileSecurityWarnWindow()
                End If
                Return Me.mUIOpenFileSecurityWarnWindow
            End Get
        End Property
        
        Public ReadOnly Property UIForm1Window() As UIForm1Window
            Get
                If (Me.mUIForm1Window Is Nothing) Then
                    Me.mUIForm1Window = New UIForm1Window()
                End If
                Return Me.mUIForm1Window
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mBasicFunctionsParams As BasicFunctionsParams
        
        Private mUIProgramManagerWindow As UIProgramManagerWindow
        
        Private mUIOpenFileSecurityWarnWindow As UIOpenFileSecurityWarnWindow
        
        Private mUIForm1Window As UIForm1Window
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'BasicFunctions'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class BasicFunctionsParams
        
        #Region "Fields"
        '''<summary>
        '''Type '=4+3' in 'CellContent' text box
        '''</summary>
        Public UICellContentEditText As String = "=4+3"
        
        '''<summary>
        '''Type '=a1+4' in 'CellContent' text box
        '''</summary>
        Public UICellContentEditText1 As String = "=a1+4"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIProgramManagerWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Program Manager"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Progman"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDesktopList() As UIDesktopList
            Get
                If (Me.mUIDesktopList Is Nothing) Then
                    Me.mUIDesktopList = New UIDesktopList(Me)
                End If
                Return Me.mUIDesktopList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDesktopList As UIDesktopList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIDesktopList
        Inherits WinList
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinList.PropertyNames.Name) = "Desktop"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetGUIShortcListItem() As WinListItem
            Get
                If (Me.mUISpreadsheetGUIShortcListItem Is Nothing) Then
                    Me.mUISpreadsheetGUIShortcListItem = New WinListItem(Me)
                    Me.mUISpreadsheetGUIShortcListItem.SearchProperties(WinListItem.PropertyNames.Name) = "SpreadsheetGUI - Shortcut"
                    Me.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager")
                End If
                Return Me.mUISpreadsheetGUIShortcListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetGUIShortcListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIOpenFileSecurityWarnWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Open File - Security Warning"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Open File - Security Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOpenWindow() As UIOpenWindow
            Get
                If (Me.mUIOpenWindow Is Nothing) Then
                    Me.mUIOpenWindow = New UIOpenWindow(Me)
                End If
                Return Me.mUIOpenWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOpenWindow As UIOpenWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIOpenWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "4426"
            Me.WindowTitles.Add("Open File - Security Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOpenButton() As WinButton
            Get
                If (Me.mUIOpenButton Is Nothing) Then
                    Me.mUIOpenButton = New WinButton(Me)
                    Me.mUIOpenButton.SearchProperties(WinButton.PropertyNames.Name) = "Open"
                    Me.mUIOpenButton.WindowTitles.Add("Open File - Security Warning")
                End If
                Return Me.mUIOpenButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOpenButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIForm1Window
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Form1"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Form1")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UICellContentWindow() As UICellContentWindow
            Get
                If (Me.mUICellContentWindow Is Nothing) Then
                    Me.mUICellContentWindow = New UICellContentWindow(Me)
                End If
                Return Me.mUICellContentWindow
            End Get
        End Property
        
        Public ReadOnly Property UIButton1Window() As UIButton1Window
            Get
                If (Me.mUIButton1Window Is Nothing) Then
                    Me.mUIButton1Window = New UIButton1Window(Me)
                End If
                Return Me.mUIButton1Window
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow
        
        Private mUICellContentWindow As UICellContentWindow
        
        Private mUIButton1Window As UIButton1Window
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "2"
            Me.WindowTitles.Add("Form1")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetPanel1Client() As WinClient
            Get
                If (Me.mUISpreadsheetPanel1Client Is Nothing) Then
                    Me.mUISpreadsheetPanel1Client = New WinClient(Me)
                    Me.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1")
                End If
                Return Me.mUISpreadsheetPanel1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetPanel1Client As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UICellContentWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "CellContent"
            Me.WindowTitles.Add("Form1")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICellContentEdit() As WinEdit
            Get
                If (Me.mUICellContentEdit Is Nothing) Then
                    Me.mUICellContentEdit = New WinEdit(Me)
                    Me.mUICellContentEdit.WindowTitles.Add("Form1")
                End If
                Return Me.mUICellContentEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICellContentEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIButton1Window
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "button1"
            Me.WindowTitles.Add("Form1")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIA1Button() As WinButton
            Get
                If (Me.mUIA1Button Is Nothing) Then
                    Me.mUIA1Button = New WinButton(Me)
                    Me.mUIA1Button.SearchProperties(WinButton.PropertyNames.Name) = "A1"
                    Me.mUIA1Button.WindowTitles.Add("Form1")
                End If
                Return Me.mUIA1Button
            End Get
        End Property
        
        Public ReadOnly Property UIB1Button() As WinButton
            Get
                If (Me.mUIB1Button Is Nothing) Then
                    Me.mUIB1Button = New WinButton(Me)
                    Me.mUIB1Button.SearchProperties(WinButton.PropertyNames.Name) = "B1"
                    Me.mUIB1Button.WindowTitles.Add("Form1")
                End If
                Return Me.mUIB1Button
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIA1Button As WinButton
        
        Private mUIB1Button As WinButton
        #End Region
    End Class
End Namespace
