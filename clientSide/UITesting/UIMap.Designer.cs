// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITesting
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Selecting Cells, Content Input, Delegates and Updating
        /// </summary>
        public void BasicFunctions()
        {
            #region Variable Declarations
            WinEdit uITypeEdit = this.UIDebugWindow.UIItemWindow.UISpreadsheetGUIListItem.UITypeEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinButton uID2Button = this.UIForm1Window.UIButton1Window.UID2Button;
            WinWindow uICellContentWindow = this.UIForm1Window.UIForm1Client.UICellContentWindow;
            #endregion

            // Double-Click 'Type' text box
            //Mouse.DoubleClick(uITypeEdit, new Point(46, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(220, 64));

            // Type '=3+2' in 'CellContent' text box
            uICellContentEdit.Text = this.BasicFunctionsParams.UICellContentEditText;

            // Type '{Enter}' in 'CellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.BasicFunctionsParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(309, 59));

            // Type '=c2+5' in 'CellContent' text box
            uICellContentEdit.Text = this.BasicFunctionsParams.UICellContentEditText1;

            // Click 'D2' button
            Mouse.Click(uID2Button, new Point(32, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(240, 62));

            // Click 'CellContent' window
            Mouse.Click(uICellContentWindow, new Point(67, 1));

            // Type '=3+7' in 'CellContent' text box
            uICellContentEdit.Text = this.BasicFunctionsParams.UICellContentEditText2;

            // Type '{Enter}' in 'CellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.BasicFunctionsParams.UICellContentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(286, 60));
        }
        
        /// <summary>
        /// Assertions for BasicFunctions
        /// </summary>
        public void AssertBasicFunctions()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            WinText uID2Text = this.UIForm1Window.UID2Window.UID2Text;
            #endregion

            // Verify that the 'Text' property of 'CellContent' text box equals '=C2+5'
            Assert.AreEqual(this.AssertBasicFunctionsExpectedValues.UICellContentEditText, uICellContentEdit.Text, "content box");

            // Verify that the 'Text' property of 'cellValue' text box equals '15'
            Assert.AreEqual(this.AssertBasicFunctionsExpectedValues.UICellValueEditText, uICellValueEdit.Text, "value box");

            // Verify that the 'DisplayText' property of 'D2' label equals 'D2'
            Assert.AreEqual(this.AssertBasicFunctionsExpectedValues.UID2TextDisplayText, uID2Text.DisplayText, "Cell Name");
        }
        
        /// <summary>
        /// Copy, Paste, Get Cell
        /// </summary>
        public void EditMenu()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinButton uID7Button = this.UIForm1Window.UIButton1Window.UID7Button;
            WinMenuItem uICopyMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIEditMenuItem.UICopyMenuItem;
            WinMenuItem uIPasteMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteMenuItem;
            WinButton uIF7Button = this.UIForm1Window.UIButton1Window.UIF7Button;
            WinMenuItem uIGetCellMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIEditMenuItem.UIGetCellMenuItem;
            WinButton uIB7Button = this.UIForm1Window.UIButton1Window.UIB7Button;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(292, 161));

            // Type '5' in 'CellContent' text box
            uICellContentEdit.Text = this.EditMenuParams.UICellContentEditText;

            // Click 'D7' button
            Mouse.Click(uID7Button, new Point(30, 15));

            // Click 'Edit' -> 'Copy' menu item
            Mouse.Click(uICopyMenuItem, new Point(43, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(470, 161));

            // Click 'Edit' -> 'Paste' menu item
            Mouse.Click(uIPasteMenuItem, new Point(38, 11));

            // Click 'F7' button
            Mouse.Click(uIF7Button, new Point(25, 14));

            // Click 'Edit' -> 'Get Cell' menu item
            Mouse.Click(uIGetCellMenuItem, new Point(36, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(178, 157));

            // Click 'Edit' -> 'Paste' menu item
            Mouse.Click(uIPasteMenuItem, new Point(48, 15));

            // Click 'B7' button
            Mouse.Click(uIB7Button, new Point(35, 17));
        }
        
        /// <summary>
        /// Asserts for EditMenu
        /// </summary>
        public void AssertEditMenu()
        {
            #region Variable Declarations
            WinText uIB7Text = this.UIForm1Window.UID2Window.UIB7Text;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Verify that the 'DisplayText' property of 'B7' label equals 'B7'
            Assert.AreEqual(this.AssertEditMenuExpectedValues.UIB7TextDisplayText, uIB7Text.DisplayText, "cell name");

            // Verify that the 'Text' property of 'CellContent' text box equals 'F7'
            Assert.AreEqual(this.AssertEditMenuExpectedValues.UICellContentEditText, uICellContentEdit.Text, "Get Cell value");
        }
        
        /// <summary>
        /// clicking Help
        /// </summary>
        public void OpenHelp()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(13, 15));
        }
        
        /// <summary>
        /// makes sure help has opened
        /// </summary>
        public void AssertHelpOpen()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            #endregion

            // Verify that the 'Exists' property of 'OK' button equals 'True'
            Assert.AreEqual(this.AssertHelpOpenExpectedValues.UIOKButtonExists, uIOKButton.Exists, "Help is not up");
        }
        
        /// <summary>
        /// closes help that was open in previous methods
        /// </summary>
        public void CloseHelp()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 12));
        }
        
        /// <summary>
        /// causes error message to appear
        /// </summary>
        public void ErrorMessageAppear()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            WinButton uIE4Button = this.UIForm1Window.UIButton1Window.UIE4Button;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(366, 104));

            // Type '=3+7+-' in 'CellContent' text box
            uICellContentEdit.Text = this.ErrorMessageAppearParams.UICellContentEditText;

            // Click 'E4' button
            Mouse.Click(uIE4Button, new Point(6, 14));
        }
        
        /// <summary>
        /// Asserts that Error Message is on screen.
        /// </summary>
        public void AssertErrorMessage()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Verify that the 'Exists' property of 'OK' button equals 'True'
            Assert.AreEqual(this.AssertErrorMessageExpectedValues.UIOKButtonExists, uIOKButton.Exists, "error message didn\'t appear");
        }
        
        /// <summary>
        /// closes Error Message from previous methods
        /// </summary>
        public void CloseErrorMessage()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 18));
        }
        
        /// <summary>
        /// creates new spreadsheets
        /// </summary>
        public void FileNew()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(31, 6));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(46, 11));
        }
        
        /// <summary>
        /// Closing spreadsheets and the applicable safety features
        /// </summary>
        public void ClosingSpreadsheets()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window2.UIForm1TitleBar.UICloseButton;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window1.UICellContentWindow.UICellContentEdit;
            WinButton uID3Button = this.UIForm1Window1.UIButton1Window.UID3Button;
            WinButton uICloseButton1 = this.UIForm1Window1.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 19));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(306, 79));

            // Type 'testing' in 'CellContent' text box
            uICellContentEdit.Text = this.ClosingSpreadsheetsParams.UICellContentEditText;

            // Click 'D3' button
            Mouse.Click(uID3Button, new Point(9, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(13, 16));
        }
        
        /// <summary>
        /// Asserts Safety feature has appeared.
        /// </summary>
        public void AssertClosingSafety()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            #endregion

            // Verify that the 'Exists' property of '&Yes' button equals 'True'
            Assert.AreEqual(this.AssertClosingSafetyExpectedValues.UIYesButtonExists, uIYesButton.Exists, "Save before exit did not appear");
        }
        
        /// <summary>
        /// Save, Save As, replace safety.
        /// </summary>
        public void SavingFunctions()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveanSpreadsheetFilWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveanSpreadsheetFilWindow.UISaveWindow.UISaveButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UIForm1Window1.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIForm1Window1.UICellContentWindow.UICellContentEdit;
            WinButton uIB8Button = this.UIForm1Window1.UIButton1Window.UIB8Button;
            WinMenuItem uISaveAsMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uISaveastypeComboBox = this.UISaveanSpreadsheetFilWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinButton uID6Button = this.UIForm1Window1.UIButton1Window.UID6Button;
            WinEdit uINameEdit = this.UISaveanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(76, 11));

            // Select 'UITest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SavingFunctionsParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(32, 5));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(37, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(130, 173));

            // Type 'al' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.SavingFunctionsParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'all test' in 'CellContent' text box
            uICellContentEdit.Text = this.SavingFunctionsParams.UICellContentEditText;

            // Click 'B8' button
            Mouse.Click(uIB8Button, new Point(25, 12));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(59, 7));

            // Select 'All files (*.*)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.SavingFunctionsParams.UISaveastypeComboBoxSelectedItem;

            // Select 'AllTest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SavingFunctionsParams.UIFilenameComboBoxEditableItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(34, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(311, 142));

            // Type 'overwrite test' in 'CellContent' text box
            uICellContentEdit.Text = this.SavingFunctionsParams.UICellContentEditText1;

            // Click 'D6' button
            Mouse.Click(uID6Button, new Point(32, 16));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(65, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(110, 10));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(72, 14));
        }
        
        /// <summary>
        /// Asserts the save files exist and the overwrite warning appeared.
        /// </summary>
        public void AssertSaving()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIDebugWindow.UIItemWindow.UIAllTestListItem.UINameEdit;
            #endregion

            // Verify that the 'Exists' property of '&Yes' button equals 'True'
            Assert.AreEqual(this.AssertSavingExpectedValues.UIYesButtonExists, uIYesButton.Exists, "Overwrite confirm didn\'t appear");

            // Verify that the 'Exists' property of 'Name' text box equals 'True'
            Assert.AreEqual(this.AssertSavingExpectedValues.UINameEditExists, uINameEdit.Exists, "sprd save failed");

            // Verify that the 'Exists' property of 'Name' text box equals 'True'
            Assert.AreEqual(this.AssertSavingExpectedValues.UINameEditExists1, uINameEdit1.Exists, "all save failed");
        }
        
        /// <summary>
        /// Opens a sprd and all file and uses Exit from file menu.
        /// </summary>
        public void OpenFunctions()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uIExitMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveanSpreadsheetFilWindow.UISaveWindow.UISaveButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit1 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinMenuItem uINewMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UIForm1Window2.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit2 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIAllTestListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow12.UIAllTestListItem.UINameEdit;
            WinListItem uIAllTestListItem = this.UIOpenanSpreadsheetFilWindow.UIItemWindow13.UIItemsViewList.UIAllTestListItem;
            WinButton uIOpenButton = this.UIOpenanSpreadsheetFilWindow.UIOpenWindow.UIOpenButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(37, 7));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(39, 8));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(112, 17));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(48, 4));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(73, 10));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(44, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(22, 11));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(36, 4));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(44, 10));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(83, 10));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(39, 5));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(46, 8));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.OpenFunctionsParams.UIFilesoftypeComboBoxSelectedItem;

            // Click 'Name' text box
            Mouse.Click(uINameEdit2, new Point(17, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit3, new Point(17, 7));

            // Click 'AllTest' list item
            Mouse.Click(uIAllTestListItem, new Point(127, 11));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(53, 19));
        }
        
        /// <summary>
        /// Asserts Open worked for sprd and all files.
        /// </summary>
        public void AssertOpen()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window2.UIForm1TitleBar;
            WinTitleBar uIForm1TitleBar1 = this.UIForm1Window1.UIForm1TitleBar;
            #endregion

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenExpectedValues.UIForm1TitleBarExists, uIForm1TitleBar.Exists, "all file opened");

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenExpectedValues.UIForm1TitleBarExists1, uIForm1TitleBar1.Exists, "sprd file did not open");
        }
        
        /// <summary>
        /// Opens sprd and all file types
        /// </summary>
        public void FileOpening()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenanSpreadsheetFilWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UIForm1Window2.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit1 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIAllTestListItem.UINameEdit;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(10, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(36, 21));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 21));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(36, 16));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(52, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(21, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(21, 15));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(33, 16));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(36, 14));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(28, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(61, 16));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.FileOpeningParams.UIFilesoftypeComboBoxSelectedItem;

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(39, 14));
        }
        
        /// <summary>
        /// Asserts that the sprd and all files were opened.
        /// </summary>
        public void AssertFileOpen()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window2.UIForm1TitleBar;
            WinTitleBar uIForm1TitleBar1 = this.UIForm1Window1.UIForm1TitleBar;
            #endregion

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertFileOpenExpectedValues.UIForm1TitleBarExists, uIForm1TitleBar.Exists, "all file did not open");

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertFileOpenExpectedValues.UIForm1TitleBarExists1, uIForm1TitleBar1.Exists, "sprd file did not open");
        }
        
        /// <summary>
        /// Opens sprd and all file types.
        /// </summary>
        public void OpenFunction()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit1 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIAllTestListItem.UINameEdit;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(32, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(11, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 10));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(74, 6));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(31, 4));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(42, 11));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.OpenFunctionParams.UIFilesoftypeComboBoxSelectedItem;

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(23, 12));
        }
        
        /// <summary>
        /// Asserts OpenFunction opened the sprd and all files.
        /// </summary>
        public void AssertOpenFunction()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window.UIForm1TitleBar;
            WinTitleBar uIForm1TitleBar1 = this.UIForm1Window1.UIForm1TitleBar;
            #endregion

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenFunctionExpectedValues.UIForm1TitleBarExists, uIForm1TitleBar.Exists, "sprd did not open");

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenFunctionExpectedValues.UIForm1TitleBarExists1, uIForm1TitleBar1.Exists, "all file did not open");
        }
        
        /// <summary>
        /// bridges gap between save and open tests.
        /// </summary>
        public void ReplaceHandler()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 5));
        }
        
        /// <summary>
        /// Opens sprd and all type files.
        /// </summary>
        public void OpeningFiles()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenanSpreadsheetFilWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit1 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIAllTestListItem.UINameEdit;
            WinListItem uIAllTestListItem = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIItemsViewList.UIAllTestListItem;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(7, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(9, 13));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(49, 18));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(41, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(45, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(45, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(66, 20));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(57, 16));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(40, 15));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(41, 9));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.OpeningFilesParams.UIFilesoftypeComboBoxSelectedItem;

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(86, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(86, 7));

            // Click 'AllTest' list item
            Mouse.Click(uIAllTestListItem, new Point(120, 11));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(12, 9));
        }
        
        /// <summary>
        /// Asserts that the sprd and all files were opened.
        /// </summary>
        public void AssertOpeningFiles()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window1.UIForm1TitleBar;
            WinTitleBar uIForm1TitleBar1 = this.UIForm1Window.UIForm1TitleBar;
            #endregion

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpeningFilesExpectedValues.UIForm1TitleBarExists, uIForm1TitleBar.Exists, "all test did not open");

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpeningFilesExpectedValues.UIForm1TitleBarExists1, uIForm1TitleBar1.Exists, "sprd file did not open");
        }
        
        /// <summary>
        /// closes app to prepare for open tests.
        /// </summary>
        public void CloseForOpen()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 20));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(53, 15));
        }
        
        /// <summary>
        /// closes spreadsheets for open methods.
        /// </summary>
        public void OpenPrepMethod()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window.UIForm1TitleBar;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Form1' title bar
            Mouse.Click(uIForm1TitleBar, new Point(490, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 22));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(26, 16));

            // Click 'Form1' title bar
            Mouse.Click(uIForm1TitleBar, new Point(151, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 22));
        }
        
        /// <summary>
        /// Opens sprd and all type files.
        /// </summary>
        public void OpenMethod()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenanSpreadsheetFilWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem1 = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit1 = this.UIOpenanSpreadsheetFilWindow.UIItemWindow11.UIAllTestListItem.UINameEdit;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(30, 3));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(41, 8));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(48, 7));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 8));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(40, 4));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.OpenMethodParams.UIFilesoftypeComboBoxSelectedItem;

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(48, 6));
        }
        
        /// <summary>
        /// Asserts the files were opened.
        /// </summary>
        public void AssertOpenMethod()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window.UIForm1TitleBar;
            WinTitleBar uIForm1TitleBar1 = this.UIForm1Window1.UIForm1TitleBar;
            #endregion

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenMethodExpectedValues.UIForm1TitleBarExists, uIForm1TitleBar.Exists, "sprd file did not open");

            // Verify that the 'Exists' property of 'Form1' title bar equals 'True'
            Assert.AreEqual(this.AssertOpenMethodExpectedValues.UIForm1TitleBarExists1, uIForm1TitleBar1.Exists, "all file did not open");
        }
        
        /// <summary>
        /// selects a cell to assert the all file was opened.
        /// </summary>
        public void AllAssertOpenPrep()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(167, 184));
        }
        
        /// <summary>
        /// Asserts all file was opened.
        /// </summary>
        public void AssertAllOpen()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'all test'
            Assert.AreEqual(this.AssertAllOpenExpectedValues.UICellValueEditText, uICellValueEdit.Text, "all file was not opened properly");
        }
        
        /// <summary>
        /// Prepares for the sprd file open assert.
        /// </summary>
        public void SprdAssertOpenPrep()
        {
            #region Variable Declarations
            WinTitleBar uIForm1TitleBar = this.UIForm1Window1.UIForm1TitleBar;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Form1' title bar
            Mouse.Click(uIForm1TitleBar, new Point(271, 6));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(293, 143));
        }
        
        /// <summary>
        /// Asserts sprd file was opened
        /// </summary>
        public void AssertSprdOpen()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window1.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals 'overwrite test'
            Assert.AreEqual(this.AssertSprdOpenExpectedValues.UICellValueEditText, uICellValueEdit.Text, "sprd file was not opened");
        }
        
        /// <summary>
        /// Asserts all file has been opened
        /// </summary>
        public void AssertAllFileOpen()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContent' text box equals 'all test'
            Assert.AreEqual(this.AssertAllFileOpenExpectedValues.UICellContentEditText, uICellContentEdit.Text, "all file did not open ");
        }
        
        /// <summary>
        /// opens sprd file
        /// </summary>
        public void OpenSprdFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIUITestsprdListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(39, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(42, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(333, 143));
        }
        
        /// <summary>
        /// asserts that sprd file opened
        /// </summary>
        public void AssertSprdOpened()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Verify that the 'Exists' property of 'CellContent' text box equals 'True'
            Assert.AreEqual(this.AssertSprdOpenedExpectedValues.UICellContentEditExists, uICellContentEdit.Exists, "sprd file did not open");
        }
        
        /// <summary>
        /// Asserts that the sprd file has opened
        /// </summary>
        public void AssertSprdFileOpen()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window.UICellContentWindow.UICellContentEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContent' text box equals 'overwrite test'
            Assert.AreEqual(this.AssertSprdFileOpenExpectedValues.UICellContentEditText, uICellContentEdit.Text, "sprd file did not open");
        }
        
        /// <summary>
        /// opens the all file
        /// </summary>
        public void AllFileOpen()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenanSpreadsheetFilWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit = this.UIOpenanSpreadsheetFilWindow.UIItemWindow.UIAllTestListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 7));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 9));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.AllFileOpenParams.UIFilesoftypeComboBoxSelectedItem;

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(9, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(166, 178));
        }
        
        /// <summary>
        /// asserts the all file has opened
        /// </summary>
        public void AssertAllFileOpened()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIForm1Window1.UICellContentWindow.UICellContentEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContent' text box equals 'all test'
            Assert.AreEqual(this.AssertAllFileOpenedExpectedValues.UICellContentEditText, uICellContentEdit.Text, "all file did not open");
        }
        
        /// <summary>
        /// closes apps
        /// </summary>
        public void CloseApp()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(54, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(45, 17));
        }
        
        #region Properties
        public virtual BasicFunctionsParams BasicFunctionsParams
        {
            get
            {
                if ((this.mBasicFunctionsParams == null))
                {
                    this.mBasicFunctionsParams = new BasicFunctionsParams();
                }
                return this.mBasicFunctionsParams;
            }
        }
        
        public virtual AssertBasicFunctionsExpectedValues AssertBasicFunctionsExpectedValues
        {
            get
            {
                if ((this.mAssertBasicFunctionsExpectedValues == null))
                {
                    this.mAssertBasicFunctionsExpectedValues = new AssertBasicFunctionsExpectedValues();
                }
                return this.mAssertBasicFunctionsExpectedValues;
            }
        }
        
        public virtual EditMenuParams EditMenuParams
        {
            get
            {
                if ((this.mEditMenuParams == null))
                {
                    this.mEditMenuParams = new EditMenuParams();
                }
                return this.mEditMenuParams;
            }
        }
        
        public virtual AssertEditMenuExpectedValues AssertEditMenuExpectedValues
        {
            get
            {
                if ((this.mAssertEditMenuExpectedValues == null))
                {
                    this.mAssertEditMenuExpectedValues = new AssertEditMenuExpectedValues();
                }
                return this.mAssertEditMenuExpectedValues;
            }
        }
        
        public virtual AssertHelpOpenExpectedValues AssertHelpOpenExpectedValues
        {
            get
            {
                if ((this.mAssertHelpOpenExpectedValues == null))
                {
                    this.mAssertHelpOpenExpectedValues = new AssertHelpOpenExpectedValues();
                }
                return this.mAssertHelpOpenExpectedValues;
            }
        }
        
        public virtual ErrorMessageAppearParams ErrorMessageAppearParams
        {
            get
            {
                if ((this.mErrorMessageAppearParams == null))
                {
                    this.mErrorMessageAppearParams = new ErrorMessageAppearParams();
                }
                return this.mErrorMessageAppearParams;
            }
        }
        
        public virtual AssertErrorMessageExpectedValues AssertErrorMessageExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessageExpectedValues == null))
                {
                    this.mAssertErrorMessageExpectedValues = new AssertErrorMessageExpectedValues();
                }
                return this.mAssertErrorMessageExpectedValues;
            }
        }
        
        public virtual ClosingSpreadsheetsParams ClosingSpreadsheetsParams
        {
            get
            {
                if ((this.mClosingSpreadsheetsParams == null))
                {
                    this.mClosingSpreadsheetsParams = new ClosingSpreadsheetsParams();
                }
                return this.mClosingSpreadsheetsParams;
            }
        }
        
        public virtual AssertClosingSafetyExpectedValues AssertClosingSafetyExpectedValues
        {
            get
            {
                if ((this.mAssertClosingSafetyExpectedValues == null))
                {
                    this.mAssertClosingSafetyExpectedValues = new AssertClosingSafetyExpectedValues();
                }
                return this.mAssertClosingSafetyExpectedValues;
            }
        }
        
        public virtual SavingFunctionsParams SavingFunctionsParams
        {
            get
            {
                if ((this.mSavingFunctionsParams == null))
                {
                    this.mSavingFunctionsParams = new SavingFunctionsParams();
                }
                return this.mSavingFunctionsParams;
            }
        }
        
        public virtual AssertSavingExpectedValues AssertSavingExpectedValues
        {
            get
            {
                if ((this.mAssertSavingExpectedValues == null))
                {
                    this.mAssertSavingExpectedValues = new AssertSavingExpectedValues();
                }
                return this.mAssertSavingExpectedValues;
            }
        }
        
        public virtual OpenFunctionsParams OpenFunctionsParams
        {
            get
            {
                if ((this.mOpenFunctionsParams == null))
                {
                    this.mOpenFunctionsParams = new OpenFunctionsParams();
                }
                return this.mOpenFunctionsParams;
            }
        }
        
        public virtual AssertOpenExpectedValues AssertOpenExpectedValues
        {
            get
            {
                if ((this.mAssertOpenExpectedValues == null))
                {
                    this.mAssertOpenExpectedValues = new AssertOpenExpectedValues();
                }
                return this.mAssertOpenExpectedValues;
            }
        }
        
        public virtual FileOpeningParams FileOpeningParams
        {
            get
            {
                if ((this.mFileOpeningParams == null))
                {
                    this.mFileOpeningParams = new FileOpeningParams();
                }
                return this.mFileOpeningParams;
            }
        }
        
        public virtual AssertFileOpenExpectedValues AssertFileOpenExpectedValues
        {
            get
            {
                if ((this.mAssertFileOpenExpectedValues == null))
                {
                    this.mAssertFileOpenExpectedValues = new AssertFileOpenExpectedValues();
                }
                return this.mAssertFileOpenExpectedValues;
            }
        }
        
        public virtual OpenFunctionParams OpenFunctionParams
        {
            get
            {
                if ((this.mOpenFunctionParams == null))
                {
                    this.mOpenFunctionParams = new OpenFunctionParams();
                }
                return this.mOpenFunctionParams;
            }
        }
        
        public virtual AssertOpenFunctionExpectedValues AssertOpenFunctionExpectedValues
        {
            get
            {
                if ((this.mAssertOpenFunctionExpectedValues == null))
                {
                    this.mAssertOpenFunctionExpectedValues = new AssertOpenFunctionExpectedValues();
                }
                return this.mAssertOpenFunctionExpectedValues;
            }
        }
        
        public virtual OpeningFilesParams OpeningFilesParams
        {
            get
            {
                if ((this.mOpeningFilesParams == null))
                {
                    this.mOpeningFilesParams = new OpeningFilesParams();
                }
                return this.mOpeningFilesParams;
            }
        }
        
        public virtual AssertOpeningFilesExpectedValues AssertOpeningFilesExpectedValues
        {
            get
            {
                if ((this.mAssertOpeningFilesExpectedValues == null))
                {
                    this.mAssertOpeningFilesExpectedValues = new AssertOpeningFilesExpectedValues();
                }
                return this.mAssertOpeningFilesExpectedValues;
            }
        }
        
        public virtual OpenMethodParams OpenMethodParams
        {
            get
            {
                if ((this.mOpenMethodParams == null))
                {
                    this.mOpenMethodParams = new OpenMethodParams();
                }
                return this.mOpenMethodParams;
            }
        }
        
        public virtual AssertOpenMethodExpectedValues AssertOpenMethodExpectedValues
        {
            get
            {
                if ((this.mAssertOpenMethodExpectedValues == null))
                {
                    this.mAssertOpenMethodExpectedValues = new AssertOpenMethodExpectedValues();
                }
                return this.mAssertOpenMethodExpectedValues;
            }
        }
        
        public virtual AssertAllOpenExpectedValues AssertAllOpenExpectedValues
        {
            get
            {
                if ((this.mAssertAllOpenExpectedValues == null))
                {
                    this.mAssertAllOpenExpectedValues = new AssertAllOpenExpectedValues();
                }
                return this.mAssertAllOpenExpectedValues;
            }
        }
        
        public virtual AssertSprdOpenExpectedValues AssertSprdOpenExpectedValues
        {
            get
            {
                if ((this.mAssertSprdOpenExpectedValues == null))
                {
                    this.mAssertSprdOpenExpectedValues = new AssertSprdOpenExpectedValues();
                }
                return this.mAssertSprdOpenExpectedValues;
            }
        }
        
        public virtual AssertAllFileOpenExpectedValues AssertAllFileOpenExpectedValues
        {
            get
            {
                if ((this.mAssertAllFileOpenExpectedValues == null))
                {
                    this.mAssertAllFileOpenExpectedValues = new AssertAllFileOpenExpectedValues();
                }
                return this.mAssertAllFileOpenExpectedValues;
            }
        }
        
        public virtual AssertSprdOpenedExpectedValues AssertSprdOpenedExpectedValues
        {
            get
            {
                if ((this.mAssertSprdOpenedExpectedValues == null))
                {
                    this.mAssertSprdOpenedExpectedValues = new AssertSprdOpenedExpectedValues();
                }
                return this.mAssertSprdOpenedExpectedValues;
            }
        }
        
        public virtual AssertSprdFileOpenExpectedValues AssertSprdFileOpenExpectedValues
        {
            get
            {
                if ((this.mAssertSprdFileOpenExpectedValues == null))
                {
                    this.mAssertSprdFileOpenExpectedValues = new AssertSprdFileOpenExpectedValues();
                }
                return this.mAssertSprdFileOpenExpectedValues;
            }
        }
        
        public virtual AllFileOpenParams AllFileOpenParams
        {
            get
            {
                if ((this.mAllFileOpenParams == null))
                {
                    this.mAllFileOpenParams = new AllFileOpenParams();
                }
                return this.mAllFileOpenParams;
            }
        }
        
        public virtual AssertAllFileOpenedExpectedValues AssertAllFileOpenedExpectedValues
        {
            get
            {
                if ((this.mAssertAllFileOpenedExpectedValues == null))
                {
                    this.mAssertAllFileOpenedExpectedValues = new AssertAllFileOpenedExpectedValues();
                }
                return this.mAssertAllFileOpenedExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UIForm1Window1 UIForm1Window1
        {
            get
            {
                if ((this.mUIForm1Window1 == null))
                {
                    this.mUIForm1Window1 = new UIForm1Window1();
                }
                return this.mUIForm1Window1;
            }
        }
        
        public UIForm1Window2 UIForm1Window2
        {
            get
            {
                if ((this.mUIForm1Window2 == null))
                {
                    this.mUIForm1Window2 = new UIForm1Window2();
                }
                return this.mUIForm1Window2;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UISaveanSpreadsheetFilWindow UISaveanSpreadsheetFilWindow
        {
            get
            {
                if ((this.mUISaveanSpreadsheetFilWindow == null))
                {
                    this.mUISaveanSpreadsheetFilWindow = new UISaveanSpreadsheetFilWindow();
                }
                return this.mUISaveanSpreadsheetFilWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenanSpreadsheetFilWindow UIOpenanSpreadsheetFilWindow
        {
            get
            {
                if ((this.mUIOpenanSpreadsheetFilWindow == null))
                {
                    this.mUIOpenanSpreadsheetFilWindow = new UIOpenanSpreadsheetFilWindow();
                }
                return this.mUIOpenanSpreadsheetFilWindow;
            }
        }
        #endregion
        
        #region Fields
        private BasicFunctionsParams mBasicFunctionsParams;
        
        private AssertBasicFunctionsExpectedValues mAssertBasicFunctionsExpectedValues;
        
        private EditMenuParams mEditMenuParams;
        
        private AssertEditMenuExpectedValues mAssertEditMenuExpectedValues;
        
        private AssertHelpOpenExpectedValues mAssertHelpOpenExpectedValues;
        
        private ErrorMessageAppearParams mErrorMessageAppearParams;
        
        private AssertErrorMessageExpectedValues mAssertErrorMessageExpectedValues;
        
        private ClosingSpreadsheetsParams mClosingSpreadsheetsParams;
        
        private AssertClosingSafetyExpectedValues mAssertClosingSafetyExpectedValues;
        
        private SavingFunctionsParams mSavingFunctionsParams;
        
        private AssertSavingExpectedValues mAssertSavingExpectedValues;
        
        private OpenFunctionsParams mOpenFunctionsParams;
        
        private AssertOpenExpectedValues mAssertOpenExpectedValues;
        
        private FileOpeningParams mFileOpeningParams;
        
        private AssertFileOpenExpectedValues mAssertFileOpenExpectedValues;
        
        private OpenFunctionParams mOpenFunctionParams;
        
        private AssertOpenFunctionExpectedValues mAssertOpenFunctionExpectedValues;
        
        private OpeningFilesParams mOpeningFilesParams;
        
        private AssertOpeningFilesExpectedValues mAssertOpeningFilesExpectedValues;
        
        private OpenMethodParams mOpenMethodParams;
        
        private AssertOpenMethodExpectedValues mAssertOpenMethodExpectedValues;
        
        private AssertAllOpenExpectedValues mAssertAllOpenExpectedValues;
        
        private AssertSprdOpenExpectedValues mAssertSprdOpenExpectedValues;
        
        private AssertAllFileOpenExpectedValues mAssertAllFileOpenExpectedValues;
        
        private AssertSprdOpenedExpectedValues mAssertSprdOpenedExpectedValues;
        
        private AssertSprdFileOpenExpectedValues mAssertSprdFileOpenExpectedValues;
        
        private AllFileOpenParams mAllFileOpenParams;
        
        private AssertAllFileOpenedExpectedValues mAssertAllFileOpenedExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIForm1Window mUIForm1Window;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UIForm1Window1 mUIForm1Window1;
        
        private UIForm1Window2 mUIForm1Window2;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UISaveanSpreadsheetFilWindow mUISaveanSpreadsheetFilWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenanSpreadsheetFilWindow mUIOpenanSpreadsheetFilWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFunctions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicFunctionsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=3+2' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "=3+2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=c2+5' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=c2+5";
        
        /// <summary>
        /// Type '=3+7' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText2 = "=3+7";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBasicFunctions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertBasicFunctionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContent' text box equals '=C2+5'
        /// </summary>
        public string UICellContentEditText = "=C2+5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '15'
        /// </summary>
        public string UICellValueEditText = "15";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'D2' label equals 'D2'
        /// </summary>
        public string UID2TextDisplayText = "D2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertEditMenuExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'B7' label equals 'B7'
        /// </summary>
        public string UIB7TextDisplayText = "B7";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContent' text box equals 'F7'
        /// </summary>
        public string UICellContentEditText = "F7";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelpOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertHelpOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'OK' button equals 'True'
        /// </summary>
        public bool UIOKButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ErrorMessageAppear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ErrorMessageAppearParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=3+7+-' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "=3+7+-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'OK' button equals 'True'
        /// </summary>
        public bool UIOKButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClosingSpreadsheets'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ClosingSpreadsheetsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testing' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "testing";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertClosingSafety'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertClosingSafetyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '&Yes' button equals 'True'
        /// </summary>
        public bool UIYesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SavingFunctions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SavingFunctionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UITest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "UITest";
        
        /// <summary>
        /// Type 'al' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "al";
        
        /// <summary>
        /// Type 'all test' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "all test";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Select 'AllTest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "AllTest";
        
        /// <summary>
        /// Type 'overwrite test' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "overwrite test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSaving'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '&Yes' button equals 'True'
        /// </summary>
        public bool UIYesButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Name' text box equals 'True'
        /// </summary>
        public bool UINameEditExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Name' text box equals 'True'
        /// </summary>
        public bool UINameEditExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFunctions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenFunctionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FileOpening'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOpeningParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFileOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFileOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenFunctionParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenFunctionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpeningFiles'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpeningFilesParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpeningFiles'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpeningFilesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Form1' title bar equals 'True'
        /// </summary>
        public bool UIForm1TitleBarExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAllOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAllOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'all test'
        /// </summary>
        public string UICellValueEditText = "all test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSprdOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSprdOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals 'overwrite test'
        /// </summary>
        public string UICellValueEditText = "overwrite test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAllFileOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAllFileOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContent' text box equals 'all test'
        /// </summary>
        public string UICellContentEditText = "all test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSprdOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSprdOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'CellContent' text box equals 'True'
        /// </summary>
        public bool UICellContentEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSprdFileOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSprdFileOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContent' text box equals 'overwrite test'
        /// </summary>
        public string UICellContentEditText = "overwrite test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AllFileOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AllFileOpenParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAllFileOpened'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAllFileOpenedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContent' text box equals 'all test'
        /// </summary>
        public string UICellContentEditText = "all test";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIListItem UISpreadsheetGUIListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIListItem == null))
                {
                    this.mUISpreadsheetGUIListItem = new UISpreadsheetGUIListItem(this);
                }
                return this.mUISpreadsheetGUIListItem;
            }
        }
        
        public UIUITestsprdListItem UIUITestsprdListItem
        {
            get
            {
                if ((this.mUIUITestsprdListItem == null))
                {
                    this.mUIUITestsprdListItem = new UIUITestsprdListItem(this);
                }
                return this.mUIUITestsprdListItem;
            }
        }
        
        public UIAllTestListItem UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new UIAllTestListItem(this);
                }
                return this.mUIAllTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIListItem mUISpreadsheetGUIListItem;
        
        private UIUITestsprdListItem mUIUITestsprdListItem;
        
        private UIAllTestListItem mUIAllTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetGUIListItem : WinListItem
    {
        
        public UISpreadsheetGUIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUITestsprdListItem : WinListItem
    {
        
        public UIUITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UITest.sprd";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTestListItem : WinListItem
    {
        
        public UIAllTestListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellContentWindow UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UIButton1Window UIButton1Window
        {
            get
            {
                if ((this.mUIButton1Window == null))
                {
                    this.mUIButton1Window = new UIButton1Window(this);
                }
                return this.mUIButton1Window;
            }
        }
        
        public UIForm1Client UIForm1Client
        {
            get
            {
                if ((this.mUIForm1Client == null))
                {
                    this.mUIForm1Client = new UIForm1Client(this);
                }
                return this.mUIForm1Client;
            }
        }
        
        public UICellValueWindow UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow(this);
                }
                return this.mUICellValueWindow;
            }
        }
        
        public UID2Window UID2Window
        {
            get
            {
                if ((this.mUID2Window == null))
                {
                    this.mUID2Window = new UID2Window(this);
                }
                return this.mUID2Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UICellContentWindow mUICellContentWindow;
        
        private UIButton1Window mUIButton1Window;
        
        private UIForm1Client mUIForm1Client;
        
        private UICellValueWindow mUICellValueWindow;
        
        private UID2Window mUID2Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentWindow : WinWindow
    {
        
        public UICellContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContent";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIButton1Window : WinWindow
    {
        
        public UIButton1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UID2Button
        {
            get
            {
                if ((this.mUID2Button == null))
                {
                    this.mUID2Button = new WinButton(this);
                    #region Search Criteria
                    this.mUID2Button.SearchProperties[WinButton.PropertyNames.Name] = "D2";
                    this.mUID2Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUID2Button;
            }
        }
        
        public WinButton UID7Button
        {
            get
            {
                if ((this.mUID7Button == null))
                {
                    this.mUID7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUID7Button.SearchProperties[WinButton.PropertyNames.Name] = "D7";
                    this.mUID7Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUID7Button;
            }
        }
        
        public WinButton UIF7Button
        {
            get
            {
                if ((this.mUIF7Button == null))
                {
                    this.mUIF7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIF7Button.SearchProperties[WinButton.PropertyNames.Name] = "F7";
                    this.mUIF7Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIF7Button;
            }
        }
        
        public WinButton UIB7Button
        {
            get
            {
                if ((this.mUIB7Button == null))
                {
                    this.mUIB7Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIB7Button.SearchProperties[WinButton.PropertyNames.Name] = "B7";
                    this.mUIB7Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIB7Button;
            }
        }
        
        public WinButton UIE4Button
        {
            get
            {
                if ((this.mUIE4Button == null))
                {
                    this.mUIE4Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIE4Button.SearchProperties[WinButton.PropertyNames.Name] = "E4";
                    this.mUIE4Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIE4Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUID2Button;
        
        private WinButton mUID7Button;
        
        private WinButton mUIF7Button;
        
        private WinButton mUIB7Button;
        
        private WinButton mUIE4Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Client : WinClient
    {
        
        public UIForm1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Form1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinWindow UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellContentWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUICellContentWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
                    this.mUICellContentWindow.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUICellContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueWindow : WinWindow
    {
        
        public UICellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UID2Window : WinWindow
    {
        
        public UID2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellLabel";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinText UID2Text
        {
            get
            {
                if ((this.mUID2Text == null))
                {
                    this.mUID2Text = new WinText(this);
                    #region Search Criteria
                    this.mUID2Text.SearchProperties[WinText.PropertyNames.Name] = "D2";
                    this.mUID2Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUID2Text;
            }
        }
        
        public WinText UIB7Text
        {
            get
            {
                if ((this.mUIB7Text == null))
                {
                    this.mUIB7Text = new WinText(this);
                    #region Search Criteria
                    this.mUIB7Text.SearchProperties[WinText.PropertyNames.Name] = "B7";
                    this.mUIB7Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIB7Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUID2Text;
        
        private WinText mUIB7Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEditMenuItem mUIEditMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICopyMenuItem
        {
            get
            {
                if ((this.mUICopyMenuItem == null))
                {
                    this.mUICopyMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICopyMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Copy";
                    this.mUICopyMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICopyMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICopyMenuItem;
            }
        }
        
        public WinMenuItem UIPasteMenuItem
        {
            get
            {
                if ((this.mUIPasteMenuItem == null))
                {
                    this.mUIPasteMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPasteMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Paste";
                    this.mUIPasteMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPasteMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIPasteMenuItem;
            }
        }
        
        public WinMenuItem UIGetCellMenuItem
        {
            get
            {
                if ((this.mUIGetCellMenuItem == null))
                {
                    this.mUIGetCellMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIGetCellMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Get Cell";
                    this.mUIGetCellMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIGetCellMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIGetCellMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICopyMenuItem;
        
        private WinMenuItem mUIPasteMenuItem;
        
        private WinMenuItem mUIGetCellMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window1 : WinWindow
    {
        
        public UIForm1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellContentWindow1 UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow1(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UIButton1Window1 UIButton1Window
        {
            get
            {
                if ((this.mUIButton1Window == null))
                {
                    this.mUIButton1Window = new UIButton1Window1(this);
                }
                return this.mUIButton1Window;
            }
        }
        
        public UIForm1TitleBar1 UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar1(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UICellValueWindow1 UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow1(this);
                }
                return this.mUICellValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UICellContentWindow1 mUICellContentWindow;
        
        private UIButton1Window1 mUIButton1Window;
        
        private UIForm1TitleBar1 mUIForm1TitleBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UICellValueWindow1 mUICellValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentWindow1 : WinWindow
    {
        
        public UICellContentWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContent";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIButton1Window1 : WinWindow
    {
        
        public UIButton1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UID3Button
        {
            get
            {
                if ((this.mUID3Button == null))
                {
                    this.mUID3Button = new WinButton(this);
                    #region Search Criteria
                    this.mUID3Button.SearchProperties[WinButton.PropertyNames.Name] = "D3";
                    this.mUID3Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUID3Button;
            }
        }
        
        public WinButton UIB8Button
        {
            get
            {
                if ((this.mUIB8Button == null))
                {
                    this.mUIB8Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIB8Button.SearchProperties[WinButton.PropertyNames.Name] = "B8";
                    this.mUIB8Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIB8Button;
            }
        }
        
        public WinButton UID6Button
        {
            get
            {
                if ((this.mUID6Button == null))
                {
                    this.mUID6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUID6Button.SearchProperties[WinButton.PropertyNames.Name] = "D6";
                    this.mUID6Button.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUID6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUID3Button;
        
        private WinButton mUIB8Button;
        
        private WinButton mUID6Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar1 : WinTitleBar
    {
        
        public UIForm1TitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueWindow1 : WinWindow
    {
        
        public UICellValueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window2 : WinWindow
    {
        
        public UIForm1Window2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIForm1MenuBar UIForm1MenuBar
        {
            get
            {
                if ((this.mUIForm1MenuBar == null))
                {
                    this.mUIForm1MenuBar = new UIForm1MenuBar(this);
                }
                return this.mUIForm1MenuBar;
            }
        }
        
        public UIForm1TitleBar2 UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar2(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIForm1MenuBar mUIForm1MenuBar;
        
        private UIForm1TitleBar2 mUIForm1TitleBar;
        
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1MenuBar : WinMenuBar
    {
        
        public UIForm1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISystemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
                    this.mUISystemMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar2 : WinTitleBar
    {
        
        public UIForm1TitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveanSpreadsheetFilWindow : WinWindow
    {
        
        public UISaveanSpreadsheetFilWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save an Spreadsheet Files";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save an Spreadsheet Files");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save an Spreadsheet Files");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        
        private WinComboBox mUISaveastypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save an Spreadsheet Files");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIUITestsprdListItem1 UIUITestsprdListItem
        {
            get
            {
                if ((this.mUIUITestsprdListItem == null))
                {
                    this.mUIUITestsprdListItem = new UIUITestsprdListItem1(this);
                }
                return this.mUIUITestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUITestsprdListItem1 mUIUITestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUITestsprdListItem1 : WinListItem
    {
        
        public UIUITestsprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UITest.sprd";
            this.WindowTitles.Add("Save an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save an Spreadsheet Files");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenanSpreadsheetFilWindow : WinWindow
    {
        
        public UIOpenanSpreadsheetFilWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open an Spreadsheet Files";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow13 UIItemWindow13
        {
            get
            {
                if ((this.mUIItemWindow13 == null))
                {
                    this.mUIItemWindow13 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow13;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow13 mUIItemWindow13;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIUITestsprdListItem2 UIUITestsprdListItem
        {
            get
            {
                if ((this.mUIUITestsprdListItem == null))
                {
                    this.mUIUITestsprdListItem = new UIUITestsprdListItem2(this);
                }
                return this.mUIUITestsprdListItem;
            }
        }
        
        public UIAllTestListItem1 UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new UIAllTestListItem1(this);
                }
                return this.mUIAllTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUITestsprdListItem2 mUIUITestsprdListItem;
        
        private UIAllTestListItem1 mUIAllTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUITestsprdListItem2 : WinListItem
    {
        
        public UIUITestsprdListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UITest.sprd";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTestListItem1 : WinListItem
    {
        
        public UIAllTestListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIAllTestListItem2 UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new UIAllTestListItem2(this);
                }
                return this.mUIAllTestListItem;
            }
        }
        
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIAllTestListItem2 mUIAllTestListItem;
        
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTestListItem2 : WinListItem
    {
        
        public UIAllTestListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinListItem UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAllTestListItem.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
                    this.mUIAllTestListItem.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUIAllTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIAllTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIAllTestListItem3 UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new UIAllTestListItem3(this);
                }
                return this.mUIAllTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAllTestListItem3 mUIAllTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTestListItem3 : WinListItem
    {
        
        public UIAllTestListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList1 UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList1(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList1 mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemsViewList1 : WinList
    {
        
        public UIItemsViewList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinListItem UIAllTestListItem
        {
            get
            {
                if ((this.mUIAllTestListItem == null))
                {
                    this.mUIAllTestListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAllTestListItem.SearchProperties[WinListItem.PropertyNames.Name] = "AllTest";
                    this.mUIAllTestListItem.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUIAllTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIAllTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open an Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open an Spreadsheet Files");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
